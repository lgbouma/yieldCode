====================
2016/02/19 LB

Former scheme was:
* Generate huge (~5e7 long) list of theta, phi, randomly distributed on a sphere.
* Call ang2pix_ring to get a list of pixel #s (healpix #s) corresponding to that
	list of theta, phi. This lits of #s is called Ipring.
* In tile_wrapper, for each tile do a "where Ipring == this tile number" to get 
	random coords corresponding to this tile number. This will give maybe 
	17000 unique coordinates (5e7/2900) for that tile.
	But there are some tiles where for FFIs, say 22k are needed (at least)

This is costly. It works to generate unique random coordinates for postage stamps,
b/c that's a short list. For FFIs, it turns out that it wound up duplicating (perhaps
many times) coordinates being assigned to stars. It did this by just using a 
"if I'm at the end of many "random" coordinate list, then modulo back to the start".

Since the code doesn't keep any kind of unique identifier for stars (hostIDs were
doubled / multiplied with the wonky "factor of two" stuff discussed in S+15's Sec 3.1),
I'm a bit miffed.
Because I want a unique system identifier. So you can know what's what.

New scheme:
* Generate many lists (each say 5e5 long) for each tile. Put them in a library.
* In tile_wrapper, restore each of these lists for each tlie (and delete them 
	afterwards). Draw on them for randoom coords.
* Total list of possible FFI star targets is only 2e7 long, divide by 3e3 ~ 1e4
	should be more than enough unique coords. It turns out with clustering (near
	the galactic plane) it's not -- the above "former scheme" still fails. 
	1e5 should be ok. I would be shocked if 5e5 random coords for each tile
	wasn't enough.


Say you want 5e5 random coords for each tile. 3e3 tiles -> 1.5e9 total coords.
Each row costs 16bytes, so total 24Gb of coordinate data.
Say you want it split in 1gb lists at first pass. Means you need 24 1gb lists.

New scheme cons:
* Loose "randomness" in choosing new set of coords for stars each time.
	But argue: any set of coords should be more or less as good as any 
	other. Planet population is still randomized.
	And the "star catalog" isn't randomized either. We're taking it as a fixed
	population. There's not really any philosophical break from that, while the

Pros:
* save physical memory allocation per run
* no duplicate coordinates for same trial

--> everything is output to local coordLib directory (nothing in yieldCode substruct)
